'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var name = "@pixi/react";
var version = "0.0.0-development";
var description = "Write PixiJS applications using React declarative style.";
var keywords = [
	"react",
	"pixi"
];
var homepage = "https://github.com/pixijs/pixi-react#readme";
var bugs = {
	url: "https://github.com/pixijs/pixi-react/issues"
};
var repository = {
	type: "git",
	url: "git+https://github.com/pixijs/pixi-react.git"
};
var license = "MIT";
var exports$1 = {
	".": {
		"import": {
			types: "./types/index.d.ts",
			"default": "./lib/index.mjs"
		},
		require: {
			types: "./types/index.d.ts",
			"default": "./lib/index.js"
		}
	}
};
var main = "lib/index.js";
var module$1 = "lib/index.mjs";
var types = "types/index.d.ts";
var files = [
	"lib",
	"dist",
	"types"
];
var workspaces = [
	"docs"
];
var scripts = {
	build: "rimraf dist lib types && rollup -c && tsc",
	"build:docs": "npm run --workspace docs build",
	deploy: "npm run deploy --workspace docs",
	"start:docs": "npm run --workspace docs start",
	clean: "xs clean",
	docs: "xs docs",
	lint: "xs lint",
	"lint:fix": "xs lint --fix",
	prepare: "husky install",
	prerelease: "npm run test:lint && npm run build",
	release: "xs bump,publish,git-push",
	test: "tsc --project tsconfig.test.json && vitest run",
	"test:e2e": "tsc --project tsconfig.test.json && vitest run e2e",
	"test:unit": "tsc --project tsconfig.test.json && vitest run unit",
	"test:lint": "xs lint",
	"test:watch": "vitest",
	"test:types": "tsc --noEmit --emitDeclarationOnly false"
};
var husky = {
	hooks: {
		"pre-commit": "lint-staged"
	}
};
var dependencies = {
	"its-fine": "^1.2.5",
	"react-reconciler": "0.31.0"
};
var devDependencies = {
	"@pixi/extension-scripts": "^4.0.0",
	"@rollup/plugin-commonjs": "^25.0.8",
	"@rollup/plugin-json": "^6.1.0",
	"@rollup/plugin-node-resolve": "^15.2.3",
	"@testing-library/jest-dom": "^6.4.8",
	"@testing-library/react": "^16.1.0",
	"@testing-library/user-event": "^14.5.2",
	"@types/react": "^19.0.0",
	"@types/react-reconciler": "^0.28.9",
	"@vitejs/plugin-react": "^4.3.1",
	"@vitest/browser": "^2.0.4",
	husky: "^8.0.0",
	jsdom: "^25.0.0",
	"pixi.js": "8.2.6",
	playwright: "^1.45.3",
	react: "^19.0.0",
	"react-dom": "^19.0.0",
	rollup: "^4.18.0",
	"rollup-plugin-esbuild": "^6.1.1",
	"rollup-plugin-inject-process-env": "^1.3.1",
	"rollup-plugin-peer-deps-external": "^2.2.4",
	"rollup-plugin-sourcemaps": "^0.6.3",
	typescript: "^5.4.5",
	vitest: "^2.0.0"
};
var peerDependencies = {
	"pixi.js": "^8.2.6",
	react: ">=19.0.0"
};
var overrides = {
	rollup: "^4.18.0"
};
var publishConfig = {
	access: "public"
};
var extensionConfig = {
	lint: [
		"test",
		"src",
		"docs"
	],
	environments: [
		"node"
	],
	docsName: "PixiJS React",
	docsTitle: "PixiJS React API Documentation",
	docsDescription: "Documentation for PixiJS React library",
	docsKeyword: "docs, documentation, pixi, pixijs, react, html5, javascript, jsdoc"
};
var packageData = {
	name: name,
	version: version,
	description: description,
	keywords: keywords,
	homepage: homepage,
	bugs: bugs,
	repository: repository,
	license: license,
	exports: exports$1,
	main: main,
	module: module$1,
	types: types,
	files: files,
	workspaces: workspaces,
	scripts: scripts,
	husky: husky,
	"lint-staged": {
	"*.{ts,js,mjs}": [
		"eslint --cache --fix --max-warnings 0"
	]
},
	dependencies: dependencies,
	devDependencies: devDependencies,
	peerDependencies: peerDependencies,
	overrides: overrides,
	publishConfig: publishConfig,
	extensionConfig: extensionConfig
};

exports.bugs = bugs;
exports.default = packageData;
exports.dependencies = dependencies;
exports.description = description;
exports.devDependencies = devDependencies;
exports.exports = exports$1;
exports.extensionConfig = extensionConfig;
exports.files = files;
exports.homepage = homepage;
exports.husky = husky;
exports.keywords = keywords;
exports.license = license;
exports.main = main;
exports.module = module$1;
exports.name = name;
exports.overrides = overrides;
exports.peerDependencies = peerDependencies;
exports.publishConfig = publishConfig;
exports.repository = repository;
exports.scripts = scripts;
exports.types = types;
exports.version = version;
exports.workspaces = workspaces;
//# sourceMappingURL=package.json.js.map
