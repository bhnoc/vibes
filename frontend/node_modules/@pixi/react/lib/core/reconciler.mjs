import packageData from '../package.json.mjs';
import { afterActiveInstanceBlur } from '../helpers/afterActiveInstanceBlur.mjs';
import { appendChild } from '../helpers/appendChild.mjs';
import { beforeActiveInstanceBlur } from '../helpers/beforeActiveInstanceBlur.mjs';
import { clearContainer } from '../helpers/clearContainer.mjs';
import { commitUpdate } from '../helpers/commitUpdate.mjs';
import { createInstance } from '../helpers/createInstance.mjs';
import { createReconciler } from '../helpers/createReconciler.mjs';
import { createTextInstance } from '../helpers/createTextInstance.mjs';
import { detachDeletedInstance } from '../helpers/detachDeletedInstance.mjs';
import { finalizeInitialChildren } from '../helpers/finalizeInitialChildren.mjs';
import { getChildHostContext } from '../helpers/getChildHostContext.mjs';
import { getCurrentUpdatePriority } from '../helpers/getCurrentUpdatePriority.mjs';
import { getInstanceFromNode } from '../helpers/getInstanceFromNode.mjs';
import { getInstanceFromScope } from '../helpers/getInstanceFromScope.mjs';
import { getPublicInstance } from '../helpers/getPublicInstance.mjs';
import { getRootHostContext } from '../helpers/getRootHostContext.mjs';
import { hideInstance } from '../helpers/hideInstance.mjs';
import { hideTextInstance } from '../helpers/hideTextInstance.mjs';
import { insertBefore } from '../helpers/insertBefore.mjs';
import { maySuspendCommit } from '../helpers/maySuspendCommit.mjs';
import { preloadInstance } from '../helpers/preloadInstance.mjs';
import { prepareForCommit } from '../helpers/prepareForCommit.mjs';
import { preparePortalMount } from '../helpers/preparePortalMount.mjs';
import { prepareScopeUpdate } from '../helpers/prepareScopeUpdate.mjs';
import { removeChild } from '../helpers/removeChild.mjs';
import { requestPostPaintCallback } from '../helpers/requestPostPaintCallback.mjs';
import { resetAfterCommit } from '../helpers/resetAfterCommit.mjs';
import { resetFormInstance } from '../helpers/resetFormInstance.mjs';
import { resolveEventTimeStamp } from '../helpers/resolveEventTimeStamp.mjs';
import { resolveEventType } from '../helpers/resolveEventType.mjs';
import { resolveUpdatePriority } from '../helpers/resolveUpdatePriority.mjs';
import { setCurrentUpdatePriority } from '../helpers/setCurrentUpdatePriority.mjs';
import { shouldAttemptEagerTransition } from '../helpers/shouldAttemptEagerTransition.mjs';
import { shouldSetTextContent } from '../helpers/shouldSetTextContent.mjs';
import { startSuspendingCommit } from '../helpers/startSuspendingCommit.mjs';
import { suspendInstance } from '../helpers/suspendInstance.mjs';
import { trackSchedulerEvent } from '../helpers/trackSchedulerEvent.mjs';
import { unhideInstance } from '../helpers/unhideInstance.mjs';
import { unhideTextInstance } from '../helpers/unhideTextInstance.mjs';
import { waitForCommitToBeReady } from '../helpers/waitForCommitToBeReady.mjs';

"use strict";
const reconcilerConfig = {
  isPrimaryRenderer: false,
  noTimeout: -1,
  NotPendingTransition: null,
  supportsHydration: false,
  supportsMutation: true,
  supportsPersistence: false,
  warnsIfNotActing: false,
  afterActiveInstanceBlur,
  appendChild,
  appendChildToContainer: appendChild,
  appendInitialChild: appendChild,
  beforeActiveInstanceBlur,
  cancelTimeout: clearTimeout,
  clearContainer,
  commitUpdate,
  createInstance,
  createTextInstance,
  hideTextInstance,
  unhideTextInstance,
  detachDeletedInstance,
  finalizeInitialChildren,
  getChildHostContext,
  getCurrentUpdatePriority,
  getInstanceFromNode,
  getInstanceFromScope,
  getPublicInstance,
  getRootHostContext,
  hideInstance,
  insertBefore,
  insertInContainerBefore: insertBefore,
  maySuspendCommit,
  preloadInstance,
  prepareForCommit,
  preparePortalMount,
  prepareScopeUpdate,
  removeChild,
  removeChildFromContainer: removeChild,
  requestPostPaintCallback,
  resetAfterCommit,
  resetFormInstance,
  resolveEventTimeStamp,
  resolveEventType,
  resolveUpdatePriority,
  scheduleTimeout: setTimeout,
  shouldAttemptEagerTransition,
  setCurrentUpdatePriority,
  shouldSetTextContent,
  startSuspendingCommit,
  suspendInstance,
  trackSchedulerEvent,
  unhideInstance,
  waitForCommitToBeReady
};
const reconciler = createReconciler(reconcilerConfig);
reconciler.injectIntoDevTools({
  bundleType: process.env.NODE_ENV === "production" ? 0 : 1,
  rendererPackageName: "@pixi/react",
  version: packageData.version
});

export { reconciler };
//# sourceMappingURL=reconciler.mjs.map
