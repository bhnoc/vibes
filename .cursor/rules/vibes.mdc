---
description: Guiding Principles for Building the Sickest Network Visualizer Ever
globs: **/*.tsx, **/*.jsx, frontend/src/**/*, **/*.go
alwaysApply: false
---


--- 

## ðŸ§  Philosophy
This is not just a toolâ€”it's a vibe. Every decision you make at the cursor should push this project toward:
- **Performance** (60+ FPS, zero lag)  
- **Personality** (retro, cinematic, terminal-chic)  
- **Precision** (tight, scalable codebase)  
- **Play** (have funâ€”you're building art, not just software)

---

## ðŸ§± General Code Rules

### 1. **Build like a gamer, not an engineer.**
- If a system feels slow, janky, or unresponsiveâ€”rewrite it.
- Prioritize smooth rendering and feedback over architectural elegance.
- If you wouldn't want to demo it in front of a crowd, it's not done.

### 2. **Treat performance like a design constraint.**
- **60+ FPS** is the benchmark for all rendering.
- Use PixiJS pools, delta-based animations, and avoid DOM thrashing.
- If you need to track performanceâ€”log it, visualize it, fix it.

### 3. **No half-assed visuals.**
- Every shape, animation, and effect should contribute to the aesthetic.
- Use easing functions, CRT filters, glows, pulsesâ€”make it _feel alive_.

### 4. **Data must flow, not just show.**
- WebSocket events must be fast, small, and consistent.
- Never block rendering with heavy packet transformsâ€”offload or batch them.
- Design protocol payloads like game engine packets: compact, clear, and predictable.

---

## ðŸ§© Frontend Rules (Pixi + React)

- All PixiJS objects must be **pooled or recyclable.** No memory leaks.  
- Render cycle = `requestAnimationFrame` only. No timers unless you mean it.  
- Nodes must interpolate position/scale over timeâ€”no jump cuts.  
- Avoid React state for anything changing faster than 30Hz. Use raw refs or Pixi containers.

---

## ðŸ›  Backend Rules (Go)

- Packet processing should be done **in memory, streaming, and fast**.  
- WebSocket payloads must be <10ms per message on ingest and <2kb when possible.  
- All traffic events are ephemeral unless saved explicitly.  
- Don't try to build a database engine. You're building a data _pulse_.

---

## ðŸŽ¨ Visual Rules

- Use a defined **retro palette** (e.g., neon green, electric blue, magenta, cyan).  
- Fonts: `VT323`, `Press Start 2P`, or `Share Tech Mono`.  
- All visuals should include some form of subtle motion: flicker, pulse, drift, shimmer.  
- Dark mode only. If someone asks for light mode, turn off their monitor.

---

## ðŸ”„ Git Rules

- Always commit when something looks cool.  
- Commit messages can be fun. Examples:
  - `feat: packet laser cannons working`
  - `style: added CRT distortion layer hell yeah`
  - `fix: packet orbs no longer teleport through the matrix`
- Keep your `main` branch demo-ready. Everything else is chaos-safe.

---

## ðŸ’¥ Final Rule: Showmanship Matters
If you're not excited to show someone what you built at the end of a sprint, redo it until you are. 